let tg = window.Telegram.WebApp;
tg.expand();

// –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã WebApp:', Object.keys(tg));
console.log('–í–µ—Ä—Å–∏—è WebApp:', tg.version);

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è tg)
const style = document.createElement('style');
style.textContent = `
    @keyframes pulse {
        0% { 
            transform: scale(1);
            color: rgba(255, 255, 255, 0.7);
        }
        50% { 
            transform: scale(1.2);
            color: rgba(255, 255, 255, 1);
        }
        100% { 
            transform: scale(1);
            color: rgba(255, 255, 255, 0.7);
        }
    }

    .stat h3.pulse {
        animation: pulse 0.3s ease-in-out;
        transform-origin: center;
    }
`;
document.head.appendChild(style);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
function saveToLocalStorage(key, value) {
    try {
        localStorage.setItem(key, value);
        return true;
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', e);
        return false;
    }
}

function loadFromLocalStorage(key) {
    try {
        return localStorage.getItem(key);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', e);
        return null;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º –∏ –¥–æ–º–∞—à–Ω–∏–º —ç–∫—Ä–∞–Ω–æ–º
async function toggleFullscreen() {
    try {
        console.log('isFullscreen –¥–æ—Å—Ç—É–ø–µ–Ω:', 'isFullscreen' in tg);
        console.log('requestFullscreen –¥–æ—Å—Ç—É–ø–µ–Ω:', 'requestFullscreen' in tg);
        console.log('exitFullscreen –¥–æ—Å—Ç—É–ø–µ–Ω:', 'exitFullscreen' in tg);
        
        if (!('requestFullscreen' in tg)) {
            tg.showAlert("–§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram");
            return;
        }

        if (!tg.isFullscreen) {
            tg.showAlert("–í–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º...");
            await tg.requestFullscreen();
        } else {
            tg.showAlert("–í—ã–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º...");
            await tg.exitFullscreen();
        }
    } catch (error) {
        tg.showAlert('–û—à–∏–±–∫–∞: ' + error.message);
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error);
    }
}

async function addToHomescreen() {
    try {
        console.log('checkHomeScreenStatus –¥–æ—Å—Ç—É–ø–µ–Ω:', 'checkHomeScreenStatus' in tg);
        console.log('addToHomeScreen –¥–æ—Å—Ç—É–ø–µ–Ω:', 'addToHomeScreen' in tg);
        
        if (!('checkHomeScreenStatus' in tg)) {
            tg.showAlert("–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram");
            return;
        }

        try {
            const status = await tg.checkHomeScreenStatus();
            if (!status) {
                tg.showAlert("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ Telegram");
                return;
            }
            
            if (status.can_add) {
                await tg.addToHomeScreen();
                tg.showAlert("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω!");
            } else {
                tg.showAlert("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω: " + (status.reason || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'));
            }
        } catch (error) {
            tg.showAlert("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: " + error.message);
        }
    } catch (error) {
        tg.showAlert('–û—à–∏–±–∫–∞: ' + error.message);
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω:', error);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
function switchPage(pageId) {
    document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
    document.getElementById(pageId).classList.add('active');
    
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Ä–∞–∑–º–µ—Ä
    if (pageId === 'mapPage' && window.map) {
        window.map.container.fitToViewport();
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const mockData = {
    history: [
        {
            date: '2024-03-15',
            time: '14:30',
            location: 'Shopping Mall',
            duration: '2h 15m',
            cost: '$45.00',
            paid: false
        },
        {
            date: '2024-03-15',
            time: '10:15',
            location: 'City Center',
            duration: '1h 30m',
            cost: '$32.50',
            paid: true
        },
        {
            date: '2024-03-14',
            time: '19:45',
            location: 'Airport',
            duration: '3h 00m',
            cost: '$67.00',
            paid: true
        }
    ],
    profile: {
        name: 'Jane Cooper',
        avatar: 'https://i.imgur.com/jOjPXr9.jpg',
        stats: {
            totalTrips: 42,
            totalDistance: '1,250 km',
            totalTime: '83h'
        }
    }
};

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
function renderHistory() {
    const historyList = document.getElementById('historyList');
    if (!historyList) return;

    historyList.innerHTML = mockData.history.map(item => `
        <div class="history-item modern animate__animated animate__fadeInUp">
            <div class="history-item-header">
                <div class="history-date">
                    <h3>${item.date}</h3>
                    <p>${item.time}</p>
                </div>
                <div class="history-cost">${item.cost}</div>
            </div>
            <div class="history-details">
                <p class="history-location">üìç ${item.location}</p>
                <p class="history-duration">‚è± ${item.duration}</p>
            </div>
            <div class="history-actions">
                ${item.paid 
                    ? '<button class="history-btn paid">‚úì –û–ø–ª–∞—á–µ–Ω–æ</button>'
                    : '<button class="history-btn pay" onclick="payHistoryItem(this)">–û–ø–ª–∞—Ç–∏—Ç—å</button>'
                }
            </div>
        </div>
    `).join('');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            e.target.classList.add('active');
            filterHistory(e.target.textContent.toLowerCase());
        });
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function filterHistory(filter) {
    const items = document.querySelectorAll('.history-item');
    items.forEach(item => {
        const isPaid = item.querySelector('.history-btn.paid') !== null;
        switch(filter) {
            case 'paid':
                item.style.display = isPaid ? 'block' : 'none';
                break;
            case 'unpaid':
                item.style.display = !isPaid ? 'block' : 'none';
                break;
            default:
                item.style.display = 'block';
        }
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø–ª–∞—Ç—ã
function payHistoryItem(button) {
    button.classList.remove('pay');
    button.classList.add('paid');
    button.textContent = '‚úì –û–ø–ª–∞—á–µ–Ω–æ';
    button.onclick = null;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è
    button.closest('.history-item').classList.add('animate__animated', 'animate__pulse');
    setTimeout(() => {
        button.closest('.history-item').classList.remove('animate__animated', 'animate__pulse');
    }, 1000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function renderProfile() {
    const profileContent = document.querySelector('.profile-content');
    if (!profileContent) return;

    const profile = mockData.profile;
    profileContent.innerHTML = `
        <div class="profile-header modern">
            <img src="${profile.avatar}" alt="${profile.name}" class="profile-avatar">
            <h2>${profile.name}</h2>
        </div>
        <div class="profile-stats modern">
            <div class="stat">
                <h3>${profile.stats.totalTrips}</h3>
                <p>Total Trips</p>
            </div>
            <div class="stat">
                <h3>${profile.stats.totalDistance}</h3>
                <p>Distance</p>
            </div>
            <div class="stat">
                <h3>${profile.stats.totalTime}</h3>
                <p>Drive Time</p>
            </div>
        </div>
    `;
}

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞—Ä–∫–æ–≤–∫–∏ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
let isParked = false;
let parkingStartTime = null;
let parkingInterval = null;
let currentStats = {
    distance: 57,
    driveTime: 43,
    money: 324
};

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∏—Å–µ–ª
function animateNumber(element, value) {
    if (!element) return;
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
    element.classList.remove('pulse');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    element.textContent = value;
    
    // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
    void element.offsetWidth;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    element.classList.add('pulse');
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        element.classList.remove('pulse');
    }, 300);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    if (!isParked) return;

    const now = new Date();
    const timeDiff = (now - parkingStartTime) / 1000; // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (—Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
    currentStats.distance += Math.random() * 0.1;
    const distanceElement = document.querySelector('.stats-card.modern .stat:nth-child(1) h3');
    if (distanceElement) {
        animateNumber(distanceElement, `${Math.round(currentStats.distance)}km`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    currentStats.driveTime = Math.floor(timeDiff / 60);
    const timeElement = document.querySelector('.stats-card.modern .stat:nth-child(2) h3');
    if (timeElement) {
        animateNumber(timeElement, `${currentStats.driveTime}min`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ (1 —Ü–µ–Ω—Ç –≤ —Å–µ–∫—É–Ω–¥—É)
    currentStats.money += 0.01;
    const moneyElement = document.querySelector('.stats-card.modern .stat:nth-child(3) h3');
    if (moneyElement) {
        animateNumber(moneyElement, `$${currentStats.money.toFixed(2)}`);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
function initializeStats() {
    const distanceElement = document.querySelector('.stats-card.modern .stat:nth-child(1) h3');
    const timeElement = document.querySelector('.stats-card.modern .stat:nth-child(2) h3');
    const moneyElement = document.querySelector('.stats-card.modern .stat:nth-child(3) h3');

    if (distanceElement) distanceElement.textContent = `${Math.round(currentStats.distance)}km`;
    if (timeElement) timeElement.textContent = `${currentStats.driveTime}min`;
    if (moneyElement) moneyElement.textContent = `$${currentStats.money.toFixed(2)}`;
}

// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    initializeStats();
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é toggleParking
function toggleParking() {
    const parkBtn = document.getElementById('parkBtn');
    const navigateBtn = document.getElementById('navigateBtn');
    
    if (!isParked) {
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∫–æ–≤–∫—É
        isParked = true;
        parkingStartTime = new Date();
        parkBtn.classList.add('active');
        parkBtn.querySelector('.text').textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (navigateBtn) {
            navigateBtn.style.display = 'flex';
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (parkingInterval) clearInterval(parkingInterval);
        parkingInterval = setInterval(updateStats, 1000);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–∞—Ä–∫–æ–≤–∫–∏
        if (currentLocation.lat && currentLocation.lng) {
            parkedLocation = {...currentLocation};
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—ã
            addMarker([parkedLocation.lat, parkedLocation.lng]);
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏-–∫–∞—Ä—Ç—É –Ω–∞ –º–µ—Å—Ç–µ –ø–∞—Ä–∫–æ–≤–∫–∏
            if (miniMap) {
                miniMap.setCenter([parkedLocation.lat, parkedLocation.lng]);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
            const data = {
                type: 'car_location',
                location: parkedLocation,
                parkingStartTime: parkingStartTime.toISOString()
            };
            tg.sendData(JSON.stringify(data));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            tg.showAlert('–õ–æ–∫–∞—Ü–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        } else {
            tg.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.');
        }
    } else {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä–∫–æ–≤–∫—É
        isParked = false;
        clearInterval(parkingInterval);
        parkBtn.classList.remove('active');
        parkBtn.querySelector('.text').textContent = '–ü—Ä–∏–ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (navigateBtn) {
            navigateBtn.style.display = 'none';
        }
        
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–∞—Ä–∫–æ–≤–∫–∏
        parkedLocation = null;
        
        // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –∫–∞—Ä—Ç
        if (carMarker) {
            map.geoObjects.remove(carMarker);
            miniMap.geoObjects.remove(carMarker);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        const historyEntry = {
            date: new Date().toISOString().split('T')[0],
            time: new Date().toTimeString().split(' ')[0].slice(0, 5),
            location: 'Current Location',
            duration: `${currentStats.driveTime}min`,
            cost: `$${currentStats.money.toFixed(2)}`,
            paid: false
        };
        mockData.history.unshift(historyEntry);
        
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        if (document.getElementById('historyPage').classList.contains('active')) {
            renderHistory();
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –º–∞—à–∏–Ω–µ
function navigateToCar() {
    if (!parkedLocation) {
        tg.showAlert('–õ–æ–∫–∞—Ü–∏—è –º–∞—à–∏–Ω—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return;
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç—ã
    switchPage('mapPage');
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–µ—Å—Ç–µ –ø–∞—Ä–∫–æ–≤–∫–∏
    if (map) {
        map.setCenter([parkedLocation.lat, parkedLocation.lng], 16);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.toggle('active', btn.dataset.tab === 'map');
    });
}

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ DOMContentLoaded –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤—è–∑–∫—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const fullscreenBtn = document.getElementById('fullscreenBtn');
    const homeScreenBtn = document.getElementById('homeScreenBtn');
    const menuBtn = document.getElementById('menuBtn');
    const searchBtn = document.getElementById('searchBtn');
    const menuPanel = document.getElementById('menuPanel');
    const searchPanel = document.getElementById('searchPanel');
    
    if (fullscreenBtn) {
        fullscreenBtn.addEventListener('click', (e) => {
            e.preventDefault();
            toggleFullscreen();
        });
    }
    
    if (homeScreenBtn) {
        homeScreenBtn.addEventListener('click', (e) => {
            e.preventDefault();
            addToHomescreen();
        });
    }
    
    if (menuBtn && menuPanel) {
        menuBtn.onclick = () => {
            menuPanel.classList.toggle('active');
        };
    }
    
    if (searchBtn && searchPanel) {
        searchBtn.onclick = () => {
            searchPanel.classList.toggle('active');
        };
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º safe areas
    updateSafeAreas();

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            const tab = btn.dataset.tab;
            switch(tab) {
                case 'dashboard':
                    switchPage('dashboard');
                    break;
                case 'map':
                    switchPage('mapPage');
                    break;
                case 'history':
                    switchPage('historyPage');
                    break;
                case 'profile':
                    switchPage('profilePage');
                    break;
            }
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    const backToMainBtn = document.getElementById('backToMain');
    if (backToMainBtn) {
        backToMainBtn.addEventListener('click', () => {
            switchPage('dashboard');
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.tab === 'dashboard');
            });
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const tab = btn.dataset.tab;
            if (tab === 'history') {
                renderHistory();
            } else if (tab === 'profile') {
                renderProfile();
            }
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞—Ä–∫–æ–≤–∫–∏
    let isParked = false;
    let parkingStartTime = null;
    let parkingInterval = null;
    let currentStats = {
        distance: 57,
        driveTime: 43,
        money: 324
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞
    function animateNumber(element, value) {
        element.textContent = value;
        element.classList.add('animated');
        setTimeout(() => element.classList.remove('animated'), 300);
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function updateStats() {
        if (!isParked) return;

        const now = new Date();
        const timeDiff = (now - parkingStartTime) / 1000; // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (—Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
        currentStats.distance += Math.random() * 0.1;
        animateNumber(
            document.querySelector('.stats-card .stat:nth-child(1) h3'),
            `${Math.round(currentStats.distance)}km`
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        currentStats.driveTime = Math.floor(timeDiff / 60);
        animateNumber(
            document.querySelector('.stats-card .stat:nth-child(2) h3'),
            `${currentStats.driveTime}min`
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ (1 —Ü–µ–Ω—Ç –≤ —Å–µ–∫—É–Ω–¥—É)
        currentStats.money += 0.01;
        animateNumber(
            document.querySelector('.stats-card .stat:nth-child(3) h3'),
            `$${currentStats.money.toFixed(2)}`
        );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–∞—Ä–∫–æ–≤–∫–∏
    let parkedLocation = null;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é toggleParking
    function toggleParking() {
        const parkBtn = document.getElementById('parkBtn');
        const navigateBtn = document.getElementById('navigateBtn');
        
        if (!isParked) {
            // –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∫–æ–≤–∫—É
            isParked = true;
            parkingStartTime = new Date();
            parkBtn.classList.add('active');
            parkBtn.querySelector('.text').textContent = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–∞—Ä–∫–æ–≤–∫–∏
            if (currentLocation.lat && currentLocation.lng) {
                parkedLocation = {...currentLocation};
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                if (navigateBtn) {
                    navigateBtn.style.display = 'flex';
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if (!navigateBtn.onclick) {
                        navigateBtn.onclick = navigateToCar;
                    }
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—ã
                addMarker([parkedLocation.lat, parkedLocation.lng]);
                
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –º–∏–Ω–∏-–∫–∞—Ä—Ç—É –Ω–∞ –º–µ—Å—Ç–µ –ø–∞—Ä–∫–æ–≤–∫–∏
                if (miniMap) {
                    miniMap.setCenter([parkedLocation.lat, parkedLocation.lng]);
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
                const data = {
                    type: 'car_location',
                    location: parkedLocation,
                    parkingStartTime: parkingStartTime.toISOString()
                };
                tg.sendData(JSON.stringify(data));
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                tg.showAlert('–õ–æ–∫–∞—Ü–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                parkingInterval = setInterval(updateStats, 1000);
            } else {
                tg.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.');
            }
        } else {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä–∫–æ–≤–∫—É
            isParked = false;
            clearInterval(parkingInterval);
            parkBtn.classList.remove('active');
            parkBtn.querySelector('.text').textContent = '–ü—Ä–∏–ø–∞—Ä–∫–æ–≤–∞—Ç—å—Å—è';
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (navigateBtn) {
                navigateBtn.style.display = 'none';
            }
            
            // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–∞—Ä–∫–æ–≤–∫–∏
            parkedLocation = null;
            
            // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –∫–∞—Ä—Ç
            if (carMarker) {
                map.geoObjects.remove(carMarker);
                miniMap.geoObjects.remove(carMarker);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            const historyEntry = {
                date: new Date().toISOString().split('T')[0],
                time: new Date().toTimeString().split(' ')[0].slice(0, 5),
                location: 'Current Location',
                duration: `${currentStats.driveTime}min`,
                cost: `$${currentStats.money.toFixed(2)}`,
                paid: false
            };
            mockData.history.unshift(historyEntry);
            
            // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            if (document.getElementById('historyPage').classList.contains('active')) {
                renderHistory();
            }
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –º–∞—à–∏–Ω–µ
    function navigateToCar() {
        if (!parkedLocation) {
            tg.showAlert('–õ–æ–∫–∞—Ü–∏—è –º–∞—à–∏–Ω—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
            return;
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ä—Ç—ã
        switchPage('mapPage');
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–µ—Å—Ç–µ –ø–∞—Ä–∫–æ–≤–∫–∏
        if (map) {
            map.setCenter([parkedLocation.lat, parkedLocation.lng], 16);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === 'map');
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ DOMContentLoaded
    document.addEventListener('DOMContentLoaded', () => {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navigateBtn = document.getElementById('navigateBtn');
        if (navigateBtn) {
            navigateBtn.addEventListener('click', navigateToCar);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mockData.profile = {
            name: '–ò–≥–æ—Ä—å',
            avatar: 'https://i.imgur.com/user-avatar.jpg',
            stats: {
                totalTrips: 42,
                totalDistance: '1,250 km',
                totalTime: '83h'
            }
        };
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–∫–æ–≤–∫–∏
    const parkBtn = document.getElementById('parkBtn');
    if (parkBtn) {
        parkBtn.addEventListener('click', toggleParking);
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è safe areas
function updateSafeAreas() {
    const root = document.documentElement;
    const safeArea = tg.safeAreaInset || { top: 0, bottom: 0, left: 0, right: 0 };
    const contentSafeArea = tg.contentSafeAreaInset || { top: 0, bottom: 0, left: 0, right: 0 };

    root.style.setProperty('--safe-area-top', `${safeArea.top}px`);
    root.style.setProperty('--safe-area-bottom', `${safeArea.bottom}px`);
    root.style.setProperty('--safe-area-left', `${safeArea.left}px`);
    root.style.setProperty('--safe-area-right', `${safeArea.right}px`);
    
    root.style.setProperty('--content-safe-area-top', `${contentSafeArea.top}px`);
    root.style.setProperty('--content-safe-area-bottom', `${contentSafeArea.bottom}px`);
    root.style.setProperty('--content-safe-area-left', `${contentSafeArea.left}px`);
    root.style.setProperty('--content-safe-area-right', `${contentSafeArea.right}px`);
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Telegram WebApp
tg.onEvent('fullscreenChanged', () => {
    document.body.classList.toggle('fullscreen', tg.isFullscreen);
    updateSafeAreas();
});

tg.onEvent('safeAreaChanged', updateSafeAreas);
tg.onEvent('contentSafeAreaChanged', updateSafeAreas);

// –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
let currentLocation = {
    lat: null,
    lng: null
};

// –û–±—ä–µ–∫—Ç—ã –∫–∞—Ä—Ç
let map = null;
let miniMap = null;
let carMarker = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç
function initMaps() {
    try {
        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞
        map = new ymaps.Map('map', {
            center: [55.7522, 37.6156], // –ú–æ—Å–∫–≤–∞
            zoom: 12,
            controls: ['zoomControl']
        });

        // –ú–∏–Ω–∏-–∫–∞—Ä—Ç–∞
        miniMap = new ymaps.Map('mini-map', {
            center: [55.7522, 37.6156],
            zoom: 12,
            controls: []
        });

        // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –Ω–∞ –º–∏–Ω–∏-–∫–∞—Ä—Ç–µ
        miniMap.behaviors.disable(['scrollZoom', 'drag']);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        getCurrentLocation();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç:', error);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function getCurrentLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            position => {
                currentLocation.lat = position.coords.latitude;
                currentLocation.lng = position.coords.longitude;
                
                const coords = [currentLocation.lat, currentLocation.lng];
                
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã
                if (map && miniMap) {
                    map.setCenter(coords);
                    miniMap.setCenter(coords);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                    addMarker(coords);
                }
            },
            error => {
                tg.showAlert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ' + error.message);
            },
            {
                enableHighAccuracy: true,
                timeout: 5000,
                maximumAge: 0
            }
        );
    } else {
        tg.showAlert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—ã
function addMarker(coords) {
    try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Ä–∫–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if (carMarker) {
            map.geoObjects.remove(carMarker);
            miniMap.geoObjects.remove(carMarker);
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
        carMarker = new ymaps.Placemark(coords, {
            balloonContent: '–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –∑–¥–µ—Å—å'
        }, {
            preset: 'islands#redAutoIcon'
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –æ–±–µ –∫–∞—Ä—Ç—ã
        map.geoObjects.add(carMarker);
        miniMap.geoObjects.add(carMarker.clone());
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', error);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API
ymaps.ready(() => {
    initMaps();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å –∫–∞—Ä—Ç–æ–π
    document.querySelectorAll('.nav-btn').forEach(btn => {
        if (btn.dataset.tab === 'map') {
            btn.addEventListener('click', () => {
                setTimeout(() => {
                    if (map) {
                        map.container.fitToViewport();
                    }
                }, 100);
            });
        }
    });
}); 